# This file defines a CI/CD workflow to run in Github Actions with focus on testing

# Name of workflow.
name: Flutter Test

# Controls when the workflow will run depending on given event(s) e.g. pushing code using git push
# With each event, one can define the branch(es) of code on which to run with `*` representing all branches
on:
  push:
    branches:
      - '*'
    paths-ignore:
      - '**/README.md'
  pull_request:
    branches: [ master ]
    paths-ignore: [ '**/README.md' ]

  # Allows one to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # id of job, a string that is unique to the "jobs" node above.
  test:
    # Title that will appear for job when specific workflow runs
    name: Run flutter test and analyze
    # Type of virtual machine (runner) on which to execute the job
    runs-on: ubuntu-latest

    # Sequence of tasks/actions/shell commands with which to which to execute / install the needed pre-requisites for the job
    steps:
      # The branch or tag ref that triggered the workflow will be checked out.
      # See: https://github.com/actions/checkout
      - name: Check out repository code
        uses: actions/checkout@v3

      # Install Java from previously created Github Action
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      - run: java -version

      # Install Flutter from previously created Github Action
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      - run: flutter --version  # Confirm Flutter is operational

      - name: Get all Flutter Packages # Label for one's step to display on GitHub.
        run: flutter pub get # This will execute the command provided to it
        
      - name: Carry out automated code generation
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Format the project code
        run: flutter format .

      - name: Check for lint issues in our Project
        continue-on-error: true
        run: flutter analyze

      - name: Test Flutter App with coverage
        run: flutter test --coverage .

      - name: Upload code coverage to codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      # Commit and push all changed files.
      - name: GIT Commit Formatted code
        # Only run on non - master branch push
        if: github.event_name == 'push' && github.ref != 'refs/heads/master'
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.repository_owner }}@users.noreply.github.com"
          # Check if we have modifications to commit
          CHANGES=$(git status --porcelain | wc -l)
          
          if [ "$CHANGES" -gt "0" ]; then
            # Show the status of files that are about to be created, updated or deleted
            git status
            
            # Commit all changes
            git commit -a -m "${{ github.event.head_commit.message }}"
            # Update the repository and make sure to skip the pipeline create for this commit
            git push
          fi

      - name: Create Pull Request
        if: github.event_name == 'push' && github.ref != 'refs/heads/master'
        uses: docker://ghcr.io/repo-sync/pull-request:v2
        with:
          destination_branch: "master"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr_title: "Pulling ${{ github.ref }} into master"
          pr_body: |
            :crown: *An automated PR*
            
            _Created by [repo-sync/pull-request](https://github.com/repo-sync/pull-request)_
          source_branch: ""
          pr_label: "automated-pr"
          pr_allow_empty: true                              # Creates pull request even if there are no changes
          pr_assignee: "${{ github.actor }}"
          pr_reviewer: "${{ github.repository_owner }}"
